{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPSpEoHk41XUx4CxwxCmj2s",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yunhyeok374/Python-study/blob/main/homework(1)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 과제 제출\n",
        "\n",
        "-이름 : 배윤혁\n",
        "-학번 : 20200737"
      ],
      "metadata": {
        "id": "ds3LiOktp6xs"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 테스트 코드"
      ],
      "metadata": {
        "id": "av_tWqOiqbOV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# q1 < q2\n",
        "\n",
        "def ItFrac(q1, q2):\n",
        "  x1, y1 = q1\n",
        "  x2, y2 = q2\n",
        "  return x1 * y2 < x2 * y1\n",
        "\n",
        "\n",
        "def test_ItFrac():\n",
        "  assert ItFrac((1,2), (1, 3)) == False\n",
        "  assert ItFrac((3,5), (2, 3)) == True\n",
        "  assert ItFrac((1,4), (1, 4)) == False\n",
        "  assert ItFrac((0,1), (1, 1)) == True\n",
        "  assert ItFrac((5,1), (10, 5)) == False\n",
        "\n",
        "  # 분모가 0인 경우\n",
        "  assert ItFrac((1, 0), (1, 1)) == False\n",
        "  assert ItFrac((1, 1), (0, 0)) == False  \n",
        "\n",
        "\n",
        "test_ItFrac()"
      ],
      "metadata": {
        "id": "Ab07Jk_kqgWA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "fQ8v2EWOufwz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# q1 > q2\n",
        "def gtFrac(q1, q2):\n",
        "  x1, y1 = q1 \n",
        "  x2, y2 = q2\n",
        "  return x1*y2 > x2*y1\n",
        "\n",
        "def test_gtFrac():\n",
        "  assert gtFrac((1,2), (1, 3)) == True \n",
        "  assert gtFrac((3,5), (2, 3)) == False\n",
        "  assert gtFrac((1,6), (1,7)) == True\n",
        "  assert gtFrac((5,5), (1,1)) == False\n",
        "  assert gtFrac((3,2), (1,2)) == True\n",
        "\n",
        "   # 분모가 0인 경우\n",
        "  assert gtFrac((1,0), (1,1)) == True\n",
        "  assert gtFrac((1,1), (0,0)) == False \n",
        "\n",
        "\n",
        "test_gtFrac()"
      ],
      "metadata": {
        "id": "nDhf1eGRqh6d"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#q1 <= q2  \n",
        "\n",
        "def leFrac(q1, q2):\n",
        "  x1, y1 = q1\n",
        "  x2, y2 = q2\n",
        "  return x1*y2 <= x2*y1\n",
        "\n",
        "\n",
        "def test_leFrac():\n",
        "    # 두 분수가 같은 경우\n",
        "    assert leFrac((1, 2), (1, 2)) == True\n",
        "\n",
        "    # 첫 번째 분수가 두 번째 분수보다 작은 경우\n",
        "    assert leFrac((1, 2), (1, 3)) == False\n",
        "    assert leFrac((2, 3), (3, 4)) == True\n",
        "\n",
        "    # 첫 번째 분수가 두 번째 분수보다 큰 경우\n",
        "    assert leFrac((1, 3), (1, 2)) == True\n",
        "    assert leFrac((3, 4), (2, 3)) == False\n",
        "\n",
        "    # 분모가 0인 경우\n",
        "    assert leFrac((1, 0), (1, 1)) == False\n",
        "    assert leFrac((1, 1), (0, 0)) == True\n",
        "\n",
        "test_leFrac()"
      ],
      "metadata": {
        "id": "n_IGRDVEraPU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# q1 >= q2\n",
        "def geFrac(q1, q2):\n",
        "  x1, y1 = q1 \n",
        "  x2, y2 = q2\n",
        "  return x1*y2 >= x2*y1\n",
        "\n",
        "\n",
        "def test_geFrac():\n",
        "    # 두 분수가 같은 경우\n",
        "    assert geFrac((1, 2), (1, 2)) == True\n",
        "\n",
        "    # 첫 번째 분수가 두 번째 분수보다 큰 경우\n",
        "    assert geFrac((1, 2), (1, 3)) == True\n",
        "    assert geFrac((3, 4), (2, 3)) == True\n",
        "\n",
        "    # 첫 번째 분수가 두 번째 분수보다 작은 경우\n",
        "    assert geFrac((1, 3), (1, 2)) == False\n",
        "    assert geFrac((2, 3), (3, 4)) == False\n",
        "\n",
        "    # 분모가 0인 경우\n",
        "    assert geFrac((1, 0), (1, 1)) == True\n",
        "    assert geFrac((1, 1), (0, 0)) == True"
      ],
      "metadata": {
        "id": "TemQ1hBGu0Ct"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# q1 == q2\n",
        "def eqFrac(q1, q2):\n",
        "  x1, y1 = q1 \n",
        "  x2, y2 = q2\n",
        "  return x1*y2 == x2*y1\n",
        "\n",
        "\n",
        "def test_eqFrac():\n",
        "    # 두 분수가 같은 경우\n",
        "    assert eqFrac((1, 2), (1, 2)) == True\n",
        "    assert eqFrac((2, 3), (4, 6)) == True\n",
        "\n",
        "    # 두 분수가 다른 경우\n",
        "    assert eqFrac((1, 2), (1, 3)) == False\n",
        "    assert eqFrac((2, 3), (3, 4)) == False\n",
        "\n",
        "    # 분모가 0인 경우\n",
        "    assert eqFrac((1, 0), (1, 1)) == False\n",
        "    assert eqFrac((1, 1), (0, 0)) == True\n",
        "\n",
        "test_eqFrac() "
      ],
      "metadata": {
        "id": "Yx4Ka3Qru6Gg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "as1fPTNMu5r5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 문제 1번 (5점+5점+10점 = 30점). 분수의 덧셈, 뺄셈, 나눗셈 함수 작성"
      ],
      "metadata": {
        "id": "H_o8VbVSqWqr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "\n",
        "def addFrac(q1, q2):\n",
        "  x1, y1 = q1\n",
        "  x2, y2 = q2\n",
        "\n",
        "\n",
        "  # 최소 공배수 계산\n",
        "\n",
        "  lcm = (y1 * y2) // math.gcd(y1, y2)\n",
        "\n",
        "  # 분자를 공통 분모로 만들어서 더해주기\n",
        "\n",
        "  x = x1 * (lcm // y1) + x2 * (lcm // y2) \n",
        "\n",
        "  gcd = math.gcd(x, lcm)\n",
        "  x //= gcd\n",
        "  lcm //= gcd\n",
        "\n",
        "  return (x, lcm)\n",
        "\n",
        "\n",
        "  # addFrac 테스트 코드\n",
        "\n",
        "#case 1:\n",
        "def test_addFrac1():\n",
        "  q1 = (3, 4)\n",
        "  q2 = (1, 2)\n",
        "  result = addFrac(q1, q2)\n",
        "  return result\n",
        "\n",
        "test_addFrac1()\n",
        "\n",
        "#case 2: (약분이 가능한지 확인)\n",
        "def test_addFrac2():\n",
        "  q1 = (3 ,10)\n",
        "  q2 = (5, 10)\n",
        "  result = addFrac(q1, q2)\n",
        "  return result\n",
        "\n",
        "test_addFrac2()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9poP53NTqJUH",
        "outputId": "18874f30-a41d-4787-a951-d8225fb1733f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(4, 5)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "def subFrac(q1, q2):\n",
        "  x1, y1 = q1\n",
        "  x2, y2 = q2\n",
        "\n",
        "\n",
        "  # 두 분수의 분모의 최소 공배수를 계산합니다.\n",
        "  lcm = (y1 * y2) // math.gcd(y1, y2)\n",
        "\n",
        "  #분자를 공통 분모로 만들어주고 빼주기\n",
        "  x = x1 * (lcm // y1) - x2 * (lcm // y2)\n",
        "\n",
        "  gcd = math.gcd(x, lcm)\n",
        "  x //= gcd\n",
        "  lcm //= gcd\n",
        "\n",
        "  return (x, lcm)\n",
        "\n",
        "\n",
        "  #subFrac 테스트 코드\n",
        "\n",
        "\n",
        "  #테스트 1: 두 분수의 분자가 같고 분모가 다른 경우\n",
        "\n",
        "  q1 = (3,4)\n",
        "  q2 = (3,8)\n",
        "  result = subFrac(q1,q2)\n",
        "  print(result)\n",
        "\n",
        "\n",
        "  #테스트 2: 두 분수의 분모가 같고 분자가 다른 경우\n",
        "  q1 = (1, 4)\n",
        "  q2 = (3, 4)\n",
        "  result = subFrac(q1, q2)\n",
        "  print(result)\n",
        "\n",
        "  #테스트 3: 두 분수의 분자와 분모가 모두 다른 경우\n",
        "  q1 = (1, 5)\n",
        "  q2 = (3, 7)\n",
        "  result = subFrac(q1, q2)\n",
        "  print(result)\n",
        "\n",
        "\n",
        "  \n"
      ],
      "metadata": {
        "id": "5O98b8Plwky1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import  math\n",
        "\n",
        "def divFrac(q1,q2):\n",
        "  #분수 q1과 q2의 분자와 분모를 얻습니다.\n",
        "\n",
        "  x1, y1 = q1\n",
        "  x2, y2 = q2\n",
        "\n",
        "  # 두 분수를 나눈다\n",
        "\n",
        "  x = x1 * y2\n",
        "  y = x2 * y1\n",
        "\n",
        "\n",
        "  #결과 분수를 약분한다.\n",
        "\n",
        "  gcd = math.gcd(x, y)\n",
        "  x //= gcd\n",
        "  y //= gcd\n",
        "\n",
        "  return(x, y)\n",
        "\n",
        "\n",
        "#테스트 코드\n",
        "# 테스트 1: 두 분수의 분자와 분모가 모두 같은 경우\n",
        "\n",
        "q1 = (1, 2)\n",
        "q2 = (1, 2)\n",
        "result = divFrac(q1, q2)\n",
        "print(result)\n",
        "\n",
        "\n",
        "#테스트 2: 첫 번째 분수의 분자가 0인 경우\n",
        "q1 = (0, 3)\n",
        "q2 = (2, 5)\n",
        "result = divFrac(q1, q2)\n",
        "print(result)\n",
        "\n",
        "\n",
        "#테스트 3: 두 분수의 분모가 같고 분자가 서로 다른 경우\n",
        "q1 = (1, 4)\n",
        "q2 = (3, 4)\n",
        "result = divFrac(q1, q2)\n",
        "print(result)\n",
        "\n",
        "\n",
        "#테스트 4: 두 분수의 분자가 분모가 모두 다른 경우\n",
        "q1 = (1, 5)\n",
        "q2 = (3, 7)\n",
        "result = divFrac(q1, q2)\n",
        "print(result)"
      ],
      "metadata": {
        "id": "QCbVGUJ_yaIn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "14c42ade-5d7c-446a-cea7-18ed928a2779"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1, 1)\n",
            "(0, 1)\n",
            "(1, 3)\n",
            "(7, 15)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 문제 2번 (10점). 0부터 9까지 글자와 A부터 Z까지 글자를 정수로 변환\n",
        "2진법부터 36진법까지의 수를 표현하는 문자열에 나타나는\n",
        "각 글자를 수치로 변환하는 데 활용할 아래의 `digit2int` 함수를 작성하라."
      ],
      "metadata": {
        "id": "AfzSYpoq-NSu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def digit2int(digit):\n",
        "    \"\"\"\n",
        "    문자로 된 숫자나 알파벳을 10진수 숫자로 변환하는 함수\n",
        "\n",
        "    :param digit: 문자로 된 숫자나 알파벳 (0~9, A~Z)\n",
        "    :return: 10진수 숫자\n",
        "    \"\"\"\n",
        "    if digit.isdigit():  # digit이 숫자인 경우\n",
        "        return int(digit)\n",
        "    else:  # digit이 알파벳인 경우\n",
        "        return ord(digit) - ord('A') + 10"
      ],
      "metadata": {
        "id": "pVPbaukS-O8X"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def digit2int(digit):\n",
        "\n",
        "  if digit.isdigit():  # digit 이 숫자인 경우\n",
        "    return int(digit)\n",
        "  else:     # digit이 알파벳인 경우\n",
        "    return ord(digit) - ord('A') +10\n",
        "\n",
        "  \n",
        "\n",
        "def test_digit2int():\n",
        "    assert digit2int('0') == 0\n",
        "    assert digit2int('5') == 5\n",
        "    assert digit2int('9') == 9\n",
        "    assert digit2int('A') == 10\n",
        "    assert digit2int('B') == 11\n",
        "    assert digit2int('Z') == 35\n",
        "\n",
        "    print('All test cases pass')\n",
        "\n",
        "\n",
        "test_digit2int()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "osTDp3zM-UUT",
        "outputId": "b9a15cf8-6933-4fa3-efb0-23d46a374e81"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "All test cases pass\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def convert_base_nat(mstr, m, n):\n",
        "    if m < 2 or n < 2:\n",
        "        raise ValueError(\"잘못된 입력: m 및 n은 2 이상이어야 합니다.\")\n",
        "    \n",
        "    nstr_int = \"\"\n",
        "    quotient = abs(mstr)\n",
        "    while quotient > 0:\n",
        "        quotient, remainder = divmod(quotient, n)\n",
        "        nstr_int = str(remainder) + nstr_int\n",
        "    \n",
        "    if mstr < 0:\n",
        "        nstr_int = \"-\" + nstr_int\n",
        "    \n",
        "    return nstr_int"
      ],
      "metadata": {
        "id": "85_myAHf-aiX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "----\n",
        "## 문제 3번 (60점). `convert_base(str, m, n, p)` 함수 작성\n",
        "\n",
        "`m` 진법의 수를 나타내는 문자열 `str`을\n",
        "`n` 진법의 수를 나타내는 문자열로 변환하는\n",
        "함수 `convert_base(str, m, n, p)`를 작성하라.\n",
        "\n",
        "`str`이 우량한 형태인지, 즉 m진법의 정수 혹은 실수(소수점 하나 포함) 형태인지\n",
        "검사하는 내용을 포함하라. 만일 불량한 입력이면 `ValueError`를 `raise`하라.\n",
        "\n",
        "`str`이 정수 형태라면, 그냥 앞서 작성한 `convert_base_nat`을 호출하기만 하면 된다.\n",
        "\n",
        "`str`이 소수점이 하나 포함횐 형태라면,\n",
        "정수 부분은 `convert_base_nat`를 활용해 변환하고,\n",
        "소수점 아래 부분을 분수 혹은 여러 개의 분수로 표현하여\n",
        "중간에 2진법을 거치지 않고 직접 m진법에서 m진법으로 \n",
        "분수의 덧셈 뺄셈 나눗셈 등의 연산을 활용한 소수점 아래 자리들에 대한 진법 변환을 하라.\n",
        "그리고 정수 부분이 변환된 문자열과 소수점 아래 자리들이 변환된 문자열을 가운데\n",
        "`'.'`을 두고 이어붙여서 리턴하면 될 것이다.\n",
        "\n",
        "마지막 파라메터 `p`는 최대 소수점 몇째 자리까지 계산할지 정해주는 용도이다.\n",
        "`m`과 `n`의 범위 즉 진법은 2진법부터 36진법까지로 하자.\n",
        "36진법의 경우는 0부터 9까지 열 개의 digit과 A부터 Z까지 알파벳 26글자를 모두 활용하게 된다."
      ],
      "metadata": {
        "id": "lmEc1xl9-ocd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def convert_base(mstr, m, n, p):\n",
        "    # 정수 또는 실수인 경우를 검사\n",
        "    try:\n",
        "        mstr_int = int(mstr)\n",
        "        mstr_nat = mstr_int\n",
        "    except ValueError:\n",
        "        try:\n",
        "            int_part, frac_part = mstr.split(\".\")\n",
        "            mstr_nat = int(int_part)\n",
        "            mstr_int = mstr_nat\n",
        "        except ValueError:\n",
        "            raise ValueError(\"잘못된 입력: mstr은 유효한 정수 또는 부동 소수점이어야 합니다.\")\n",
        "\n",
        "    # 변환 진법이 2 이상인 경우를 검사\n",
        "    if m < 2 or n < 2:\n",
        "        raise ValueError(\"잘못된 입력: m과 n은 2 이상이어야 합니다.\")\n",
        "\n",
        "    # p가 음수인 경우를 검사\n",
        "    if p < 0:\n",
        "        raise ValueError(\"잘못된 입력: p는 음수가 아닌 정수여야 합니다.\")\n",
        "\n",
        "    # 정수형으로 변환한 수를 n진법으로 변환\n",
        "    nstr_int = convert_base_nat(mstr, m, n)\n",
        "\n",
        "    # 소수점 이하 자릿수를 처리\n",
        "    if \".\" in str(mstr):\n",
        "        # 정수부분과 소수부분 분리\n",
        "        int_part, frac_part = str(mstr).split(\".\")\n",
        "\n",
        "        # 정수부분을 n진법으로 변환한 문자열을 구함\n",
        "        nstr_int_part = convert_base_nat(int(int_part), m, n)\n",
        "\n",
        "        # 소수부분을 실수로 변환한 후, 소수점 이하 p자리까지만 문자열로 변환\n",
        "        frac_part_float = float(\"0.\" + frac_part)\n",
        "        frac_part_str = format(frac_part_float, \".{}f\".format(p))[2:]\n",
        "\n",
        "        # 변환된 정수부분과 소수부분을 합쳐서 반환\n",
        "        nstr = \"{}.{}\".format(nstr_int_part, frac_part_str)\n",
        "    else:\n",
        "        nstr = nstr_int\n",
        "\n",
        "    # 부호 처리\n",
        "    if mstr_int < 0:\n",
        "        nstr = \"-\" + nstr\n",
        "\n",
        "    return nstr"
      ],
      "metadata": {
        "id": "QpjiDhiawtit"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def test_convert_base():\n",
        "    # 정수형태 변환\n",
        "    assert convert_base(\"1010\", 2, 10, 0) == \"10\"\n",
        "    assert convert_base(\"FF\", 16, 2, 0) == \"11111111\"\n",
        "    assert convert_base(\"1024\", 10, 16, 0) == \"400\"\n",
        "    assert convert_base(\"1110011\", 2, 8, 0) == \"63\"\n",
        "    assert convert_base(\"12345\", 10, 36, 0) == \"9IX\"\n",
        "    assert convert_base(\"9IX\", 36, 10, 0) == \"12345\"\n",
        "\n",
        "    # 실수형태 변환\n",
        "    assert convert_base(\"1010.1010\", 2, 10, 4) == \"10.6250\"\n",
        "    assert convert_base(\"3.14\", 10, 2, 4) == \"11.0010\"\n",
        "    assert convert_base(\"11.0010\", 2, 10, 4) == \"3.2500\"\n",
        "    assert convert_base(\"ABC.DEF\", 16, 2, 12) == \"101010111100.110111111111\"\n",
        "    assert convert_base(\"101010111100.110111111111\", 2, 16, 12) == \"ABC.DEF000000\"\n",
        "    \n",
        "    # 잘못된 입력 처리\n",
        "    try:\n",
        "        convert_base(\"12345\", 2, 10, 0)\n",
        "    except ValueError:\n",
        "        pass\n",
        "    else:\n",
        "        assert False, \"유효하지 않은 입력에 대해 ValueError를 발생시키지 않았습니다.\"\n",
        "        \n",
        "    try:\n",
        "        convert_base(\"1010.1010\", 10, 2, 4)\n",
        "    except ValueError:\n",
        "        pass\n",
        "    else:\n",
        "        assert False, \"유효하지 않은 입력에 대해 ValueError를 발생시키지 않았습니다.t\"\n",
        "        \n",
        "    try:\n",
        "        convert_base(\"11.00.10\", 2, 10, 4)\n",
        "    except ValueError:\n",
        "        pass\n",
        "    else:\n",
        "        assert False, \"유효하지 않은 입력에 대해 ValueError를 발생시키지 않았습니다.\"\n",
        "        \n",
        "    try:\n",
        "        convert_base(\"1010.1010\", 2, 10, -1)\n",
        "    except ValueError:\n",
        "        pass\n",
        "    else:\n",
        "        assert False, \"유효하지 않은 입력에 대해 ValueError를 발생시키지 않았습니다.\"\n"
      ],
      "metadata": {
        "id": "HSNB60kuzqP0"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}